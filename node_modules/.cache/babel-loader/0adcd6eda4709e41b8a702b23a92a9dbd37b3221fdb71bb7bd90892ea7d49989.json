{"ast":null,"code":"import axios from 'axios';\nexport class ESPNApiService {\n  constructor() {\n    this.api = void 0;\n    this.baseUrl = 'https://fantasy.espn.com/apis/v3/games/ffl';\n    this.api = axios.create({\n      baseURL: this.baseUrl,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  /**\r\n   * Authenticate with ESPN (requires manual login for now)\r\n   * In a real app, you'd implement OAuth flow\r\n   */\n  async authenticate(username, password) {\n    // ESPN doesn't have a public API for authentication\n    // Users need to manually get their league ID and team ID\n    // This is a limitation of ESPN's API\n    throw new Error('ESPN requires manual league/team ID setup. Please use the manual setup flow.');\n  }\n\n  /**\r\n   * Get league information\r\n   */\n  async getLeague(leagueId, season = new Date().getFullYear()) {\n    try {\n      const response = await this.api.get(`/seasons/${season}/segments/0/leagues/${leagueId}`);\n      const data = response.data;\n      return {\n        id: data.id.toString(),\n        name: data.name,\n        season: data.seasonId,\n        scoringPeriodId: data.scoringPeriodId,\n        teams: data.teams.map(team => ({\n          id: team.id.toString(),\n          name: team.name,\n          owners: team.owners.map(owner => owner.displayName),\n          record: {\n            wins: team.record.overall.wins,\n            losses: team.record.overall.losses,\n            ties: team.record.overall.ties\n          },\n          roster: team.roster.entries.map(entry => {\n            var _entry$playerPoolEntr, _entry$playerPoolEntr2, _entry$playerPoolEntr3, _entry$playerPoolEntr4;\n            return {\n              id: entry.playerId.toString(),\n              name: entry.playerPoolEntry.player.fullName,\n              position: entry.playerPoolEntry.player.defaultPositionId,\n              team: entry.playerPoolEntry.player.proTeamId,\n              injuryStatus: entry.playerPoolEntry.player.injuryStatus,\n              projectedPoints: (_entry$playerPoolEntr = entry.playerPoolEntry.player.stats) === null || _entry$playerPoolEntr === void 0 ? void 0 : (_entry$playerPoolEntr2 = _entry$playerPoolEntr.find(stat => stat.statSourceId === 1 && stat.statSplitTypeId === 1)) === null || _entry$playerPoolEntr2 === void 0 ? void 0 : _entry$playerPoolEntr2.appliedTotal,\n              actualPoints: (_entry$playerPoolEntr3 = entry.playerPoolEntry.player.stats) === null || _entry$playerPoolEntr3 === void 0 ? void 0 : (_entry$playerPoolEntr4 = _entry$playerPoolEntr3.find(stat => stat.statSourceId === 0 && stat.statSplitTypeId === 1)) === null || _entry$playerPoolEntr4 === void 0 ? void 0 : _entry$playerPoolEntr4.appliedTotal\n            };\n          })\n        }))\n      };\n    } catch (error) {\n      console.error('Failed to fetch ESPN league:', error);\n      throw new Error(`Failed to fetch league ${leagueId}: ${error}`);\n    }\n  }\n\n  /**\r\n   * Get team lineup for a specific week\r\n   */\n  async getTeamLineup(leagueId, teamId, week, season = new Date().getFullYear()) {\n    try {\n      const response = await this.api.get(`/seasons/${season}/segments/0/leagues/${leagueId}`, {\n        params: {\n          view: 'mRoster',\n          scoringPeriodId: week\n        }\n      });\n      const data = response.data;\n      const team = data.teams.find(t => t.id.toString() === teamId);\n      if (!team) {\n        throw new Error(`Team ${teamId} not found in league ${leagueId}`);\n      }\n      const roster = team.roster.entries;\n      const players = {};\n\n      // Map ESPN roster to our lineup format\n      roster.forEach(entry => {\n        const player = entry.playerPoolEntry.player;\n        const position = this.mapESPNPosition(player.defaultPositionId);\n        const lineupPosition = this.mapESPNLineupPosition(entry.lineupSlotId);\n        if (lineupPosition && lineupPosition !== 'BENCH') {\n          var _entry$playerPoolEntr5, _entry$playerPoolEntr6, _entry$playerPoolEntr7, _entry$playerPoolEntr8;\n          players[lineupPosition] = {\n            id: player.id.toString(),\n            name: player.fullName,\n            position: position,\n            team: this.mapESPNTeam(player.proTeamId),\n            injuryStatus: this.mapESPNInjuryStatus(player.injuryStatus),\n            projectedPoints: (_entry$playerPoolEntr5 = entry.playerPoolEntry.player.stats) === null || _entry$playerPoolEntr5 === void 0 ? void 0 : (_entry$playerPoolEntr6 = _entry$playerPoolEntr5.find(stat => stat.statSourceId === 1 && stat.statSplitTypeId === 1)) === null || _entry$playerPoolEntr6 === void 0 ? void 0 : _entry$playerPoolEntr6.appliedTotal,\n            actualPoints: (_entry$playerPoolEntr7 = entry.playerPoolEntry.player.stats) === null || _entry$playerPoolEntr7 === void 0 ? void 0 : (_entry$playerPoolEntr8 = _entry$playerPoolEntr7.find(stat => stat.statSourceId === 0 && stat.statSplitTypeId === 1)) === null || _entry$playerPoolEntr8 === void 0 ? void 0 : _entry$playerPoolEntr8.appliedTotal\n          };\n        }\n      });\n\n      // Add bench players\n      const benchPlayers = roster.filter(entry => entry.lineupSlotId === 20) // 20 = Bench in ESPN\n      .map(entry => {\n        var _entry$playerPoolEntr9, _entry$playerPoolEntr0, _entry$playerPoolEntr1, _entry$playerPoolEntr10;\n        const player = entry.playerPoolEntry.player;\n        return {\n          id: player.id.toString(),\n          name: player.fullName,\n          position: this.mapESPNPosition(player.defaultPositionId),\n          team: this.mapESPNTeam(player.proTeamId),\n          injuryStatus: this.mapESPNInjuryStatus(player.injuryStatus),\n          projectedPoints: (_entry$playerPoolEntr9 = entry.playerPoolEntry.player.stats) === null || _entry$playerPoolEntr9 === void 0 ? void 0 : (_entry$playerPoolEntr0 = _entry$playerPoolEntr9.find(stat => stat.statSourceId === 1 && stat.statSplitTypeId === 1)) === null || _entry$playerPoolEntr0 === void 0 ? void 0 : _entry$playerPoolEntr0.appliedTotal,\n          actualPoints: (_entry$playerPoolEntr1 = entry.playerPoolEntry.player.stats) === null || _entry$playerPoolEntr1 === void 0 ? void 0 : (_entry$playerPoolEntr10 = _entry$playerPoolEntr1.find(stat => stat.statSourceId === 0 && stat.statSplitTypeId === 1)) === null || _entry$playerPoolEntr10 === void 0 ? void 0 : _entry$playerPoolEntr10.appliedTotal\n        };\n      });\n      if (benchPlayers.length > 0) {\n        players.BENCH = benchPlayers;\n      }\n      const totalProjectedPoints = Object.values(players).filter(player => !Array.isArray(player)).reduce((sum, player) => sum + (player.projectedPoints || 0), 0);\n      return {\n        id: `espn-${teamId}-${week}`,\n        teamId: teamId,\n        week: week,\n        season: season,\n        players: players,\n        totalProjectedPoints: totalProjectedPoints,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('Failed to fetch ESPN lineup:', error);\n      throw new Error(`Failed to fetch lineup for team ${teamId}: ${error}`);\n    }\n  }\n\n  /**\r\n   * Update team lineup (this would require ESPN's lineup API)\r\n   */\n  async updateLineup(leagueId, teamId, week, lineup) {\n    // ESPN's lineup update API is complex and requires specific formatting\n    // This would need to be implemented based on ESPN's specific requirements\n    console.log('ESPN lineup update not implemented yet');\n    return false;\n  }\n\n  /**\r\n   * Map ESPN position IDs to our position format\r\n   */\n  mapESPNPosition(positionId) {\n    const positionMap = {\n      1: 'QB',\n      2: 'RB',\n      3: 'WR',\n      4: 'TE',\n      5: 'K',\n      16: 'DEF'\n    };\n    return positionMap[positionId] || 'UNKNOWN';\n  }\n\n  /**\r\n   * Map ESPN lineup slot IDs to our lineup positions\r\n   */\n  mapESPNLineupPosition(slotId) {\n    const slotMap = {\n      0: 'QB',\n      1: 'RB1',\n      2: 'RB2',\n      3: 'WR1',\n      4: 'WR2',\n      5: 'TE',\n      6: 'FLEX',\n      7: 'K',\n      8: 'DEF',\n      20: 'BENCH'\n    };\n    return slotMap[slotId] || null;\n  }\n\n  /**\r\n   * Map ESPN team IDs to team abbreviations\r\n   */\n  mapESPNTeam(teamId) {\n    const teamMap = {\n      1: 'ATL',\n      2: 'BUF',\n      3: 'CHI',\n      4: 'CIN',\n      5: 'CLE',\n      6: 'DAL',\n      7: 'DEN',\n      8: 'DET',\n      9: 'GB',\n      10: 'TEN',\n      11: 'IND',\n      12: 'KC',\n      13: 'LV',\n      14: 'LAR',\n      15: 'MIA',\n      16: 'MIN',\n      17: 'NE',\n      18: 'NO',\n      19: 'NYG',\n      20: 'NYJ',\n      21: 'PHI',\n      22: 'ARI',\n      23: 'PIT',\n      24: 'LAC',\n      25: 'SF',\n      26: 'SEA',\n      27: 'TB',\n      28: 'WSH',\n      29: 'CAR',\n      30: 'JAX',\n      33: 'BAL',\n      34: 'HOU'\n    };\n    return teamMap[teamId] || 'UNK';\n  }\n\n  /**\r\n   * Map ESPN injury status to our format\r\n   */\n  mapESPNInjuryStatus(status) {\n    const statusMap = {\n      'ACTIVE': 'healthy',\n      'QUESTIONABLE': 'questionable',\n      'DOUBTFUL': 'doubtful',\n      'OUT': 'out'\n    };\n    return statusMap[status] || 'healthy';\n  }\n}\n\n// Export a singleton instance\nexport const espnApi = new ESPNApiService();","map":{"version":3,"names":["axios","ESPNApiService","constructor","api","baseUrl","create","baseURL","timeout","headers","authenticate","username","password","Error","getLeague","leagueId","season","Date","getFullYear","response","get","data","id","toString","name","seasonId","scoringPeriodId","teams","map","team","owners","owner","displayName","record","wins","overall","losses","ties","roster","entries","entry","_entry$playerPoolEntr","_entry$playerPoolEntr2","_entry$playerPoolEntr3","_entry$playerPoolEntr4","playerId","playerPoolEntry","player","fullName","position","defaultPositionId","proTeamId","injuryStatus","projectedPoints","stats","find","stat","statSourceId","statSplitTypeId","appliedTotal","actualPoints","error","console","getTeamLineup","teamId","week","params","view","t","players","forEach","mapESPNPosition","lineupPosition","mapESPNLineupPosition","lineupSlotId","_entry$playerPoolEntr5","_entry$playerPoolEntr6","_entry$playerPoolEntr7","_entry$playerPoolEntr8","mapESPNTeam","mapESPNInjuryStatus","benchPlayers","filter","_entry$playerPoolEntr9","_entry$playerPoolEntr0","_entry$playerPoolEntr1","_entry$playerPoolEntr10","length","BENCH","totalProjectedPoints","Object","values","Array","isArray","reduce","sum","lastUpdated","updateLineup","lineup","log","positionId","positionMap","slotId","slotMap","teamMap","status","statusMap","espnApi"],"sources":["C:/Users/morga/fantasy-football-central/src/services/espnApi.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { FantasyTeam, Lineup, Player } from '../types';\r\n\r\nexport interface ESPNLeague {\r\n  id: string;\r\n  name: string;\r\n  season: number;\r\n  scoringPeriodId: number;\r\n  teams: ESPNTeam[];\r\n}\r\n\r\nexport interface ESPNTeam {\r\n  id: string;\r\n  name: string;\r\n  owners: string[];\r\n  record: {\r\n    wins: number;\r\n    losses: number;\r\n    ties: number;\r\n  };\r\n  roster: ESPNPlayer[];\r\n}\r\n\r\nexport interface ESPNPlayer {\r\n  id: string;\r\n  name: string;\r\n  position: string;\r\n  team: string;\r\n  injuryStatus?: string;\r\n  projectedPoints?: number;\r\n  actualPoints?: number;\r\n}\r\n\r\nexport class ESPNApiService {\r\n  private api: AxiosInstance;\r\n  private baseUrl = 'https://fantasy.espn.com/apis/v3/games/ffl';\r\n\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: this.baseUrl,\r\n      timeout: 10000,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Authenticate with ESPN (requires manual login for now)\r\n   * In a real app, you'd implement OAuth flow\r\n   */\r\n  async authenticate(username: string, password: string): Promise<string> {\r\n    // ESPN doesn't have a public API for authentication\r\n    // Users need to manually get their league ID and team ID\r\n    // This is a limitation of ESPN's API\r\n    throw new Error('ESPN requires manual league/team ID setup. Please use the manual setup flow.');\r\n  }\r\n\r\n  /**\r\n   * Get league information\r\n   */\r\n  async getLeague(leagueId: string, season: number = new Date().getFullYear()): Promise<ESPNLeague> {\r\n    try {\r\n      const response = await this.api.get(`/seasons/${season}/segments/0/leagues/${leagueId}`);\r\n      const data = response.data;\r\n\r\n      return {\r\n        id: data.id.toString(),\r\n        name: data.name,\r\n        season: data.seasonId,\r\n        scoringPeriodId: data.scoringPeriodId,\r\n        teams: data.teams.map((team: any) => ({\r\n          id: team.id.toString(),\r\n          name: team.name,\r\n          owners: team.owners.map((owner: any) => owner.displayName),\r\n          record: {\r\n            wins: team.record.overall.wins,\r\n            losses: team.record.overall.losses,\r\n            ties: team.record.overall.ties,\r\n          },\r\n          roster: team.roster.entries.map((entry: any) => ({\r\n            id: entry.playerId.toString(),\r\n            name: entry.playerPoolEntry.player.fullName,\r\n            position: entry.playerPoolEntry.player.defaultPositionId,\r\n            team: entry.playerPoolEntry.player.proTeamId,\r\n            injuryStatus: entry.playerPoolEntry.player.injuryStatus,\r\n            projectedPoints: entry.playerPoolEntry.player.stats?.find((stat: any) => \r\n              stat.statSourceId === 1 && stat.statSplitTypeId === 1\r\n            )?.appliedTotal,\r\n            actualPoints: entry.playerPoolEntry.player.stats?.find((stat: any) => \r\n              stat.statSourceId === 0 && stat.statSplitTypeId === 1\r\n            )?.appliedTotal,\r\n          })),\r\n        })),\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to fetch ESPN league:', error);\r\n      throw new Error(`Failed to fetch league ${leagueId}: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get team lineup for a specific week\r\n   */\r\n  async getTeamLineup(leagueId: string, teamId: string, week: number, season: number = new Date().getFullYear()): Promise<Lineup> {\r\n    try {\r\n      const response = await this.api.get(`/seasons/${season}/segments/0/leagues/${leagueId}`, {\r\n        params: {\r\n          view: 'mRoster',\r\n          scoringPeriodId: week,\r\n        },\r\n      });\r\n\r\n      const data = response.data;\r\n      const team = data.teams.find((t: any) => t.id.toString() === teamId);\r\n      \r\n      if (!team) {\r\n        throw new Error(`Team ${teamId} not found in league ${leagueId}`);\r\n      }\r\n\r\n      const roster = team.roster.entries;\r\n      const players: any = {};\r\n\r\n      // Map ESPN roster to our lineup format\r\n      roster.forEach((entry: any) => {\r\n        const player = entry.playerPoolEntry.player;\r\n        const position = this.mapESPNPosition(player.defaultPositionId);\r\n        const lineupPosition = this.mapESPNLineupPosition(entry.lineupSlotId);\r\n\r\n        if (lineupPosition && lineupPosition !== 'BENCH') {\r\n          players[lineupPosition] = {\r\n            id: player.id.toString(),\r\n            name: player.fullName,\r\n            position: position,\r\n            team: this.mapESPNTeam(player.proTeamId),\r\n            injuryStatus: this.mapESPNInjuryStatus(player.injuryStatus),\r\n            projectedPoints: entry.playerPoolEntry.player.stats?.find((stat: any) => \r\n              stat.statSourceId === 1 && stat.statSplitTypeId === 1\r\n            )?.appliedTotal,\r\n            actualPoints: entry.playerPoolEntry.player.stats?.find((stat: any) => \r\n              stat.statSourceId === 0 && stat.statSplitTypeId === 1\r\n            )?.appliedTotal,\r\n          };\r\n        }\r\n      });\r\n\r\n      // Add bench players\r\n      const benchPlayers = roster\r\n        .filter((entry: any) => entry.lineupSlotId === 20) // 20 = Bench in ESPN\r\n        .map((entry: any) => {\r\n          const player = entry.playerPoolEntry.player;\r\n          return {\r\n            id: player.id.toString(),\r\n            name: player.fullName,\r\n            position: this.mapESPNPosition(player.defaultPositionId),\r\n            team: this.mapESPNTeam(player.proTeamId),\r\n            injuryStatus: this.mapESPNInjuryStatus(player.injuryStatus),\r\n            projectedPoints: entry.playerPoolEntry.player.stats?.find((stat: any) => \r\n              stat.statSourceId === 1 && stat.statSplitTypeId === 1\r\n            )?.appliedTotal,\r\n            actualPoints: entry.playerPoolEntry.player.stats?.find((stat: any) => \r\n              stat.statSourceId === 0 && stat.statSplitTypeId === 1\r\n            )?.appliedTotal,\r\n          };\r\n        });\r\n\r\n      if (benchPlayers.length > 0) {\r\n        players.BENCH = benchPlayers;\r\n      }\r\n\r\n      const totalProjectedPoints = Object.values(players)\r\n        .filter(player => !Array.isArray(player))\r\n        .reduce((sum, player) => sum + ((player as Player).projectedPoints || 0), 0);\r\n\r\n      return {\r\n        id: `espn-${teamId}-${week}`,\r\n        teamId: teamId,\r\n        week: week,\r\n        season: season,\r\n        players: players,\r\n        totalProjectedPoints: totalProjectedPoints,\r\n        lastUpdated: new Date(),\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to fetch ESPN lineup:', error);\r\n      throw new Error(`Failed to fetch lineup for team ${teamId}: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update team lineup (this would require ESPN's lineup API)\r\n   */\r\n  async updateLineup(leagueId: string, teamId: string, week: number, lineup: Partial<Lineup>): Promise<boolean> {\r\n    // ESPN's lineup update API is complex and requires specific formatting\r\n    // This would need to be implemented based on ESPN's specific requirements\r\n    console.log('ESPN lineup update not implemented yet');\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Map ESPN position IDs to our position format\r\n   */\r\n  private mapESPNPosition(positionId: number): string {\r\n    const positionMap: { [key: number]: string } = {\r\n      1: 'QB',\r\n      2: 'RB',\r\n      3: 'WR',\r\n      4: 'TE',\r\n      5: 'K',\r\n      16: 'DEF',\r\n    };\r\n    return positionMap[positionId] || 'UNKNOWN';\r\n  }\r\n\r\n  /**\r\n   * Map ESPN lineup slot IDs to our lineup positions\r\n   */\r\n  private mapESPNLineupPosition(slotId: number): string | null {\r\n    const slotMap: { [key: number]: string } = {\r\n      0: 'QB',\r\n      1: 'RB1',\r\n      2: 'RB2',\r\n      3: 'WR1',\r\n      4: 'WR2',\r\n      5: 'TE',\r\n      6: 'FLEX',\r\n      7: 'K',\r\n      8: 'DEF',\r\n      20: 'BENCH',\r\n    };\r\n    return slotMap[slotId] || null;\r\n  }\r\n\r\n  /**\r\n   * Map ESPN team IDs to team abbreviations\r\n   */\r\n  private mapESPNTeam(teamId: number): string {\r\n    const teamMap: { [key: number]: string } = {\r\n      1: 'ATL', 2: 'BUF', 3: 'CHI', 4: 'CIN', 5: 'CLE', 6: 'DAL', 7: 'DEN', 8: 'DET',\r\n      9: 'GB', 10: 'TEN', 11: 'IND', 12: 'KC', 13: 'LV', 14: 'LAR', 15: 'MIA', 16: 'MIN',\r\n      17: 'NE', 18: 'NO', 19: 'NYG', 20: 'NYJ', 21: 'PHI', 22: 'ARI', 23: 'PIT', 24: 'LAC',\r\n      25: 'SF', 26: 'SEA', 27: 'TB', 28: 'WSH', 29: 'CAR', 30: 'JAX', 33: 'BAL', 34: 'HOU',\r\n    };\r\n    return teamMap[teamId] || 'UNK';\r\n  }\r\n\r\n  /**\r\n   * Map ESPN injury status to our format\r\n   */\r\n  private mapESPNInjuryStatus(status: string): string {\r\n    const statusMap: { [key: string]: string } = {\r\n      'ACTIVE': 'healthy',\r\n      'QUESTIONABLE': 'questionable',\r\n      'DOUBTFUL': 'doubtful',\r\n      'OUT': 'out',\r\n    };\r\n    return statusMap[status] || 'healthy';\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const espnApi = new ESPNApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}