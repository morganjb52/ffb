{"ast":null,"code":"import axios from 'axios';\nexport class YahooApiService {\n  constructor() {\n    this.api = void 0;\n    this.baseUrl = 'https://fantasysports.yahooapis.com/fantasy/v2';\n    this.accessToken = null;\n    this.api = axios.create({\n      baseURL: this.baseUrl,\n      timeout: 10000,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${this.accessToken}`\n      }\n    });\n  }\n\n  /**\r\n   * Set access token for authenticated requests\r\n   */\n  setAccessToken(token) {\n    this.accessToken = token;\n    this.api.defaults.headers['Authorization'] = `Bearer ${token}`;\n  }\n\n  /**\r\n   * Get OAuth authorization URL\r\n   */\n  getAuthUrl(clientId, redirectUri) {\n    const params = new URLSearchParams({\n      client_id: clientId,\n      redirect_uri: redirectUri,\n      response_type: 'code',\n      scope: 'fspt-r'\n    });\n    return `https://api.login.yahoo.com/oauth2/request_auth?${params.toString()}`;\n  }\n\n  /**\r\n   * Exchange authorization code for access token\r\n   */\n  async exchangeCodeForToken(code, clientId, clientSecret, redirectUri) {\n    try {\n      const response = await axios.post('https://api.login.yahoo.com/oauth2/get_token', {\n        grant_type: 'authorization_code',\n        redirect_uri: redirectUri,\n        code: code,\n        client_id: clientId,\n        client_secret: clientSecret\n      }, {\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      });\n      const {\n        access_token\n      } = response.data;\n      this.setAccessToken(access_token);\n      return access_token;\n    } catch (error) {\n      console.error('Failed to exchange code for token:', error);\n      throw new Error('Failed to authenticate with Yahoo');\n    }\n  }\n\n  /**\r\n   * Get user's leagues\r\n   */\n  async getUserLeagues(season = new Date().getFullYear()) {\n    try {\n      const response = await this.api.get(`/users;use_login=1/games;game_keys=nfl/leagues`);\n      const data = response.data;\n      return data.fantasy_content.users[0].user[1].games[0].game[1].leagues.map(league => ({\n        league_id: league.league[0].league_id,\n        name: league.league[0].name,\n        season: season,\n        teams: league.league[1].teams.map(team => ({\n          team_id: team.team[0].team_id,\n          name: team.team[0].name,\n          owners: team.team[0].managers.map(manager => manager.manager.nickname),\n          record: {\n            wins: parseInt(team.team[0].team_standings.team_standings.outcome_totals.wins),\n            losses: parseInt(team.team[0].team_standings.team_standings.outcome_totals.losses),\n            ties: parseInt(team.team[0].team_standings.team_standings.outcome_totals.ties)\n          },\n          roster: [] // Will be populated separately\n        }))\n      }));\n    } catch (error) {\n      console.error('Failed to fetch Yahoo leagues:', error);\n      throw new Error('Failed to fetch Yahoo leagues');\n    }\n  }\n\n  /**\r\n   * Get team lineup for a specific week\r\n   */\n  async getTeamLineup(leagueId, teamId, week, season = new Date().getFullYear()) {\n    try {\n      const response = await this.api.get(`/league/${leagueId}/team/${teamId}/roster;week=${week}`);\n      const data = response.data;\n      const roster = data.fantasy_content.league[1].teams[0].team[1].roster[0].players;\n      const players = {};\n\n      // Map Yahoo roster to our lineup format\n      roster.forEach(player => {\n        const playerData = player.player[0];\n        const position = this.mapYahooPosition(playerData.display_position);\n        const lineupPosition = this.mapYahooLineupPosition(playerData.selected_position);\n        if (lineupPosition && lineupPosition !== 'BN') {\n          var _playerData$projected, _playerData$points;\n          players[lineupPosition] = {\n            id: playerData.player_id,\n            name: playerData.name.full,\n            position: position,\n            team: playerData.editorial_team_abbr,\n            injuryStatus: this.mapYahooInjuryStatus(playerData.injury_status),\n            projectedPoints: (_playerData$projected = playerData.projected_points) === null || _playerData$projected === void 0 ? void 0 : _playerData$projected.total,\n            actualPoints: (_playerData$points = playerData.points) === null || _playerData$points === void 0 ? void 0 : _playerData$points.total\n          };\n        }\n      });\n\n      // Add bench players\n      const benchPlayers = roster.filter(player => player.player[0].selected_position === 'BN').map(player => {\n        var _playerData$projected2, _playerData$points2;\n        const playerData = player.player[0];\n        return {\n          id: playerData.player_id,\n          name: playerData.name.full,\n          position: this.mapYahooPosition(playerData.display_position),\n          team: playerData.editorial_team_abbr,\n          injuryStatus: this.mapYahooInjuryStatus(playerData.injury_status),\n          projectedPoints: (_playerData$projected2 = playerData.projected_points) === null || _playerData$projected2 === void 0 ? void 0 : _playerData$projected2.total,\n          actualPoints: (_playerData$points2 = playerData.points) === null || _playerData$points2 === void 0 ? void 0 : _playerData$points2.total\n        };\n      });\n      if (benchPlayers.length > 0) {\n        players.BENCH = benchPlayers;\n      }\n      const totalProjectedPoints = Object.values(players).filter(player => !Array.isArray(player)).reduce((sum, player) => sum + (player.projectedPoints || 0), 0);\n      return {\n        id: `yahoo-${teamId}-${week}`,\n        teamId: teamId,\n        week: week,\n        season: season,\n        players: players,\n        totalProjectedPoints: totalProjectedPoints,\n        lastUpdated: new Date()\n      };\n    } catch (error) {\n      console.error('Failed to fetch Yahoo lineup:', error);\n      throw new Error(`Failed to fetch lineup for team ${teamId}: ${error}`);\n    }\n  }\n\n  /**\r\n   * Update team lineup\r\n   */\n  async updateLineup(leagueId, teamId, week, lineup) {\n    try {\n      // Yahoo's lineup update API requires specific formatting\n      const rosterUpdates = Object.entries(lineup.players || {}).map(([position, player]) => {\n        if (Array.isArray(player)) return null;\n        return {\n          player_id: player === null || player === void 0 ? void 0 : player.id,\n          position: this.mapYahooLineupPositionReverse(position)\n        };\n      }).filter(Boolean);\n      const response = await this.api.put(`/league/${leagueId}/team/${teamId}/roster`, {\n        roster: rosterUpdates\n      });\n      return response.status === 200;\n    } catch (error) {\n      console.error('Failed to update Yahoo lineup:', error);\n      return false;\n    }\n  }\n\n  /**\r\n   * Map Yahoo position to our format\r\n   */\n  mapYahooPosition(position) {\n    const positionMap = {\n      'QB': 'QB',\n      'RB': 'RB',\n      'WR': 'WR',\n      'TE': 'TE',\n      'K': 'K',\n      'DEF': 'DEF'\n    };\n    return positionMap[position] || position;\n  }\n\n  /**\r\n   * Map Yahoo lineup position to our format\r\n   */\n  mapYahooLineupPosition(position) {\n    const positionMap = {\n      'QB': 'QB',\n      'RB': 'RB1',\n      'WR': 'WR1',\n      'TE': 'TE',\n      'K': 'K',\n      'DEF': 'DEF',\n      'W/R/T': 'FLEX',\n      'BN': 'BENCH'\n    };\n    return positionMap[position] || null;\n  }\n\n  /**\r\n   * Map our lineup position to Yahoo format\r\n   */\n  mapYahooLineupPositionReverse(position) {\n    const positionMap = {\n      'QB': 'QB',\n      'RB1': 'RB',\n      'RB2': 'RB',\n      'WR1': 'WR',\n      'WR2': 'WR',\n      'TE': 'TE',\n      'FLEX': 'W/R/T',\n      'K': 'K',\n      'DEF': 'DEF'\n    };\n    return positionMap[position] || position;\n  }\n\n  /**\r\n   * Map Yahoo injury status to our format\r\n   */\n  mapYahooInjuryStatus(status) {\n    const statusMap = {\n      '': 'healthy',\n      'Q': 'questionable',\n      'D': 'doubtful',\n      'O': 'out'\n    };\n    return statusMap[status] || 'healthy';\n  }\n}\n\n// Export a singleton instance\nexport const yahooApi = new YahooApiService();","map":{"version":3,"names":["axios","YahooApiService","constructor","api","baseUrl","accessToken","create","baseURL","timeout","headers","setAccessToken","token","defaults","getAuthUrl","clientId","redirectUri","params","URLSearchParams","client_id","redirect_uri","response_type","scope","toString","exchangeCodeForToken","code","clientSecret","response","post","grant_type","client_secret","access_token","data","error","console","Error","getUserLeagues","season","Date","getFullYear","get","fantasy_content","users","user","games","game","leagues","map","league","league_id","name","teams","team","team_id","owners","managers","manager","nickname","record","wins","parseInt","team_standings","outcome_totals","losses","ties","roster","getTeamLineup","leagueId","teamId","week","players","forEach","player","playerData","position","mapYahooPosition","display_position","lineupPosition","mapYahooLineupPosition","selected_position","_playerData$projected","_playerData$points","id","player_id","full","editorial_team_abbr","injuryStatus","mapYahooInjuryStatus","injury_status","projectedPoints","projected_points","total","actualPoints","points","benchPlayers","filter","_playerData$projected2","_playerData$points2","length","BENCH","totalProjectedPoints","Object","values","Array","isArray","reduce","sum","lastUpdated","updateLineup","lineup","rosterUpdates","entries","mapYahooLineupPositionReverse","Boolean","put","status","positionMap","statusMap","yahooApi"],"sources":["C:/Users/morga/fantasy-football-central/src/services/yahooApi.ts"],"sourcesContent":["import axios, { AxiosInstance } from 'axios';\r\nimport { FantasyTeam, Lineup, Player } from '../types';\r\n\r\nexport interface YahooLeague {\r\n  league_id: string;\r\n  name: string;\r\n  season: number;\r\n  teams: YahooTeam[];\r\n}\r\n\r\nexport interface YahooTeam {\r\n  team_id: string;\r\n  name: string;\r\n  owners: string[];\r\n  record: {\r\n    wins: number;\r\n    losses: number;\r\n    ties: number;\r\n  };\r\n  roster: YahooPlayer[];\r\n}\r\n\r\nexport interface YahooPlayer {\r\n  player_id: string;\r\n  name: string;\r\n  position: string;\r\n  team: string;\r\n  injuryStatus?: string;\r\n  projectedPoints?: number;\r\n  actualPoints?: number;\r\n}\r\n\r\nexport class YahooApiService {\r\n  private api: AxiosInstance;\r\n  private baseUrl = 'https://fantasysports.yahooapis.com/fantasy/v2';\r\n  private accessToken: string | null = null;\r\n\r\n  constructor() {\r\n    this.api = axios.create({\r\n      baseURL: this.baseUrl,\r\n      timeout: 10000,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${this.accessToken}`,\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set access token for authenticated requests\r\n   */\r\n  setAccessToken(token: string) {\r\n    this.accessToken = token;\r\n    this.api.defaults.headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n\r\n  /**\r\n   * Get OAuth authorization URL\r\n   */\r\n  getAuthUrl(clientId: string, redirectUri: string): string {\r\n    const params = new URLSearchParams({\r\n      client_id: clientId,\r\n      redirect_uri: redirectUri,\r\n      response_type: 'code',\r\n      scope: 'fspt-r',\r\n    });\r\n    \r\n    return `https://api.login.yahoo.com/oauth2/request_auth?${params.toString()}`;\r\n  }\r\n\r\n  /**\r\n   * Exchange authorization code for access token\r\n   */\r\n  async exchangeCodeForToken(code: string, clientId: string, clientSecret: string, redirectUri: string): Promise<string> {\r\n    try {\r\n      const response = await axios.post('https://api.login.yahoo.com/oauth2/get_token', {\r\n        grant_type: 'authorization_code',\r\n        redirect_uri: redirectUri,\r\n        code: code,\r\n        client_id: clientId,\r\n        client_secret: clientSecret,\r\n      }, {\r\n        headers: {\r\n          'Content-Type': 'application/x-www-form-urlencoded',\r\n        },\r\n      });\r\n\r\n      const { access_token } = response.data;\r\n      this.setAccessToken(access_token);\r\n      return access_token;\r\n    } catch (error) {\r\n      console.error('Failed to exchange code for token:', error);\r\n      throw new Error('Failed to authenticate with Yahoo');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get user's leagues\r\n   */\r\n  async getUserLeagues(season: number = new Date().getFullYear()): Promise<YahooLeague[]> {\r\n    try {\r\n      const response = await this.api.get(`/users;use_login=1/games;game_keys=nfl/leagues`);\r\n      const data = response.data;\r\n\r\n      return data.fantasy_content.users[0].user[1].games[0].game[1].leagues.map((league: any) => ({\r\n        league_id: league.league[0].league_id,\r\n        name: league.league[0].name,\r\n        season: season,\r\n        teams: league.league[1].teams.map((team: any) => ({\r\n          team_id: team.team[0].team_id,\r\n          name: team.team[0].name,\r\n          owners: team.team[0].managers.map((manager: any) => manager.manager.nickname),\r\n          record: {\r\n            wins: parseInt(team.team[0].team_standings.team_standings.outcome_totals.wins),\r\n            losses: parseInt(team.team[0].team_standings.team_standings.outcome_totals.losses),\r\n            ties: parseInt(team.team[0].team_standings.team_standings.outcome_totals.ties),\r\n          },\r\n          roster: [], // Will be populated separately\r\n        })),\r\n      }));\r\n    } catch (error) {\r\n      console.error('Failed to fetch Yahoo leagues:', error);\r\n      throw new Error('Failed to fetch Yahoo leagues');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get team lineup for a specific week\r\n   */\r\n  async getTeamLineup(leagueId: string, teamId: string, week: number, season: number = new Date().getFullYear()): Promise<Lineup> {\r\n    try {\r\n      const response = await this.api.get(`/league/${leagueId}/team/${teamId}/roster;week=${week}`);\r\n      const data = response.data;\r\n\r\n      const roster = data.fantasy_content.league[1].teams[0].team[1].roster[0].players;\r\n      const players: any = {};\r\n\r\n      // Map Yahoo roster to our lineup format\r\n      roster.forEach((player: any) => {\r\n        const playerData = player.player[0];\r\n        const position = this.mapYahooPosition(playerData.display_position);\r\n        const lineupPosition = this.mapYahooLineupPosition(playerData.selected_position);\r\n\r\n        if (lineupPosition && lineupPosition !== 'BN') {\r\n          players[lineupPosition] = {\r\n            id: playerData.player_id,\r\n            name: playerData.name.full,\r\n            position: position,\r\n            team: playerData.editorial_team_abbr,\r\n            injuryStatus: this.mapYahooInjuryStatus(playerData.injury_status),\r\n            projectedPoints: playerData.projected_points?.total,\r\n            actualPoints: playerData.points?.total,\r\n          };\r\n        }\r\n      });\r\n\r\n      // Add bench players\r\n      const benchPlayers = roster\r\n        .filter((player: any) => player.player[0].selected_position === 'BN')\r\n        .map((player: any) => {\r\n          const playerData = player.player[0];\r\n          return {\r\n            id: playerData.player_id,\r\n            name: playerData.name.full,\r\n            position: this.mapYahooPosition(playerData.display_position),\r\n            team: playerData.editorial_team_abbr,\r\n            injuryStatus: this.mapYahooInjuryStatus(playerData.injury_status),\r\n            projectedPoints: playerData.projected_points?.total,\r\n            actualPoints: playerData.points?.total,\r\n          };\r\n        });\r\n\r\n      if (benchPlayers.length > 0) {\r\n        players.BENCH = benchPlayers;\r\n      }\r\n\r\n      const totalProjectedPoints = Object.values(players)\r\n        .filter(player => !Array.isArray(player))\r\n        .reduce((sum: number, player) => sum + ((player as Player).projectedPoints || 0), 0);\r\n\r\n      return {\r\n        id: `yahoo-${teamId}-${week}`,\r\n        teamId: teamId,\r\n        week: week,\r\n        season: season,\r\n        players: players,\r\n        totalProjectedPoints: totalProjectedPoints as number,\r\n        lastUpdated: new Date(),\r\n      };\r\n    } catch (error) {\r\n      console.error('Failed to fetch Yahoo lineup:', error);\r\n      throw new Error(`Failed to fetch lineup for team ${teamId}: ${error}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update team lineup\r\n   */\r\n  async updateLineup(leagueId: string, teamId: string, week: number, lineup: Partial<Lineup>): Promise<boolean> {\r\n    try {\r\n      // Yahoo's lineup update API requires specific formatting\r\n      const rosterUpdates = Object.entries(lineup.players || {}).map(([position, player]) => {\r\n        if (Array.isArray(player)) return null;\r\n        return {\r\n          player_id: player?.id,\r\n          position: this.mapYahooLineupPositionReverse(position),\r\n        };\r\n      }).filter(Boolean);\r\n\r\n      const response = await this.api.put(`/league/${leagueId}/team/${teamId}/roster`, {\r\n        roster: rosterUpdates,\r\n      });\r\n\r\n      return response.status === 200;\r\n    } catch (error) {\r\n      console.error('Failed to update Yahoo lineup:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map Yahoo position to our format\r\n   */\r\n  private mapYahooPosition(position: string): string {\r\n    const positionMap: { [key: string]: string } = {\r\n      'QB': 'QB',\r\n      'RB': 'RB',\r\n      'WR': 'WR',\r\n      'TE': 'TE',\r\n      'K': 'K',\r\n      'DEF': 'DEF',\r\n    };\r\n    return positionMap[position] || position;\r\n  }\r\n\r\n  /**\r\n   * Map Yahoo lineup position to our format\r\n   */\r\n  private mapYahooLineupPosition(position: string): string | null {\r\n    const positionMap: { [key: string]: string } = {\r\n      'QB': 'QB',\r\n      'RB': 'RB1',\r\n      'WR': 'WR1',\r\n      'TE': 'TE',\r\n      'K': 'K',\r\n      'DEF': 'DEF',\r\n      'W/R/T': 'FLEX',\r\n      'BN': 'BENCH',\r\n    };\r\n    return positionMap[position] || null;\r\n  }\r\n\r\n  /**\r\n   * Map our lineup position to Yahoo format\r\n   */\r\n  private mapYahooLineupPositionReverse(position: string): string {\r\n    const positionMap: { [key: string]: string } = {\r\n      'QB': 'QB',\r\n      'RB1': 'RB',\r\n      'RB2': 'RB',\r\n      'WR1': 'WR',\r\n      'WR2': 'WR',\r\n      'TE': 'TE',\r\n      'FLEX': 'W/R/T',\r\n      'K': 'K',\r\n      'DEF': 'DEF',\r\n    };\r\n    return positionMap[position] || position;\r\n  }\r\n\r\n  /**\r\n   * Map Yahoo injury status to our format\r\n   */\r\n  private mapYahooInjuryStatus(status: string): string {\r\n    const statusMap: { [key: string]: string } = {\r\n      '': 'healthy',\r\n      'Q': 'questionable',\r\n      'D': 'doubtful',\r\n      'O': 'out',\r\n    };\r\n    return statusMap[status] || 'healthy';\r\n  }\r\n}\r\n\r\n// Export a singleton instance\r\nexport const yahooApi = new YahooApiService();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}