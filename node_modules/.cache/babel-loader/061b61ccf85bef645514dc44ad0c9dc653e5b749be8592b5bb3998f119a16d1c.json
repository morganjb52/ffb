{"ast":null,"code":"import { create } from 'zustand';\nimport { unifiedApi } from '../services/unifiedApi';\nexport const useStore = create((set, get) => ({\n  // Initial state\n  user: null,\n  teams: [],\n  lineups: [],\n  leagueRecords: [],\n  connections: [],\n  isLoading: false,\n  error: null,\n  selectedTeam: null,\n  // User actions\n  setUser: user => set({\n    user\n  }),\n  // Team actions\n  setTeams: teams => set({\n    teams\n  }),\n  addTeam: team => set(state => ({\n    teams: [...state.teams, team]\n  })),\n  updateTeam: (teamId, updates) => set(state => ({\n    teams: state.teams.map(team => team.id === teamId ? {\n      ...team,\n      ...updates\n    } : team)\n  })),\n  // Lineup actions\n  setLineups: lineups => set({\n    lineups\n  }),\n  updateLineup: (lineupId, updates) => set(state => ({\n    lineups: state.lineups.map(lineup => lineup.id === lineupId ? {\n      ...lineup,\n      ...updates\n    } : lineup)\n  })),\n  // League record actions\n  setLeagueRecords: leagueRecords => set({\n    leagueRecords\n  }),\n  // Connection actions\n  setConnections: connections => set({\n    connections\n  }),\n  updateConnection: (platform, updates) => set(state => ({\n    connections: state.connections.map(conn => conn.platform === platform ? {\n      ...conn,\n      ...updates\n    } : conn)\n  })),\n  // UI actions\n  setLoading: isLoading => set({\n    isLoading\n  }),\n  setError: error => set({\n    error\n  }),\n  setSelectedTeam: selectedTeam => set({\n    selectedTeam\n  }),\n  // Complex actions\n  syncTeam: async teamId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const {\n        teams\n      } = get();\n      const team = teams.find(t => t.id === teamId);\n      if (!team) {\n        throw new Error('Team not found');\n      }\n\n      // Sync lineup data from the platform\n      const lineup = await unifiedApi.getTeamLineup(team, 8); // Default to week 8\n\n      // Update the team's last sync date\n      set(state => ({\n        teams: state.teams.map(t => t.id === teamId ? {\n          ...t,\n          lastSyncDate: new Date()\n        } : t)\n      }));\n\n      // Update lineup data in the store\n      set(state => ({\n        lineups: [...state.lineups.filter(l => l.id !== lineup.id), lineup]\n      }));\n    } catch (error) {\n      console.error('Failed to sync team:', error);\n      set({\n        error: 'Failed to sync team'\n      });\n    } finally {\n      set({\n        isLoading: false\n      });\n    }\n  },\n  updateLineupPlayer: (lineupId, position, player) => {\n    set(state => ({\n      lineups: state.lineups.map(lineup => {\n        if (lineup.id === lineupId) {\n          return {\n            ...lineup,\n            players: {\n              ...lineup.players,\n              [position]: player\n            },\n            lastUpdated: new Date()\n          };\n        }\n        return lineup;\n      })\n    }));\n  },\n  calculateWinLoss: () => {\n    var _get$user;\n    const {\n      teams\n    } = get();\n    const currentSeason = new Date().getFullYear();\n    const totalWins = teams.reduce((sum, team) => sum + team.record.wins, 0);\n    const totalLosses = teams.reduce((sum, team) => sum + team.record.losses, 0);\n    const totalTies = teams.reduce((sum, team) => sum + team.record.ties, 0);\n    const leagueRecord = {\n      id: `record-${currentSeason}`,\n      userId: ((_get$user = get().user) === null || _get$user === void 0 ? void 0 : _get$user.id) || '',\n      season: currentSeason,\n      totalWins,\n      totalLosses,\n      totalTies,\n      winPercentage: totalWins / (totalWins + totalLosses + totalTies) || 0,\n      leagues: teams.map(team => ({\n        teamId: team.id,\n        teamName: team.name,\n        platform: team.platform,\n        wins: team.record.wins,\n        losses: team.record.losses,\n        ties: team.record.ties\n      }))\n    };\n    set(state => ({\n      leagueRecords: [...state.leagueRecords.filter(record => record.season !== currentSeason), leagueRecord]\n    }));\n  }\n}));","map":{"version":3,"names":["create","unifiedApi","useStore","set","get","user","teams","lineups","leagueRecords","connections","isLoading","error","selectedTeam","setUser","setTeams","addTeam","team","state","updateTeam","teamId","updates","map","id","setLineups","updateLineup","lineupId","lineup","setLeagueRecords","setConnections","updateConnection","platform","conn","setLoading","setError","setSelectedTeam","syncTeam","find","t","Error","getTeamLineup","lastSyncDate","Date","filter","l","console","updateLineupPlayer","position","player","players","lastUpdated","calculateWinLoss","_get$user","currentSeason","getFullYear","totalWins","reduce","sum","record","wins","totalLosses","losses","totalTies","ties","leagueRecord","userId","season","winPercentage","leagues","teamName","name"],"sources":["C:/Users/morga/fantasy-football-central/src/store/useStore.ts"],"sourcesContent":["import { create } from 'zustand';\r\nimport { FantasyTeam, Lineup, LeagueRecord, PlatformConnection, User } from '../types';\r\nimport { unifiedApi } from '../services/unifiedApi';\r\n\r\ninterface AppState {\r\n  // User data\r\n  user: User | null;\r\n  setUser: (user: User | null) => void;\r\n  \r\n  // Teams\r\n  teams: FantasyTeam[];\r\n  setTeams: (teams: FantasyTeam[]) => void;\r\n  addTeam: (team: FantasyTeam) => void;\r\n  updateTeam: (teamId: string, updates: Partial<FantasyTeam>) => void;\r\n  \r\n  // Lineups\r\n  lineups: Lineup[];\r\n  setLineups: (lineups: Lineup[]) => void;\r\n  updateLineup: (lineupId: string, updates: Partial<Lineup>) => void;\r\n  \r\n  // League records\r\n  leagueRecords: LeagueRecord[];\r\n  setLeagueRecords: (records: LeagueRecord[]) => void;\r\n  \r\n  // Platform connections\r\n  connections: PlatformConnection[];\r\n  setConnections: (connections: PlatformConnection[]) => void;\r\n  updateConnection: (platform: string, updates: Partial<PlatformConnection>) => void;\r\n  \r\n  // UI state\r\n  isLoading: boolean;\r\n  setLoading: (loading: boolean) => void;\r\n  \r\n  error: string | null;\r\n  setError: (error: string | null) => void;\r\n  \r\n  selectedTeam: string | null;\r\n  setSelectedTeam: (teamId: string | null) => void;\r\n  \r\n  // Actions\r\n  syncTeam: (teamId: string) => Promise<void>;\r\n  updateLineupPlayer: (lineupId: string, position: string, player: any) => void;\r\n  calculateWinLoss: () => void;\r\n}\r\n\r\nexport const useStore = create<AppState>((set, get) => ({\r\n  // Initial state\r\n  user: null,\r\n  teams: [],\r\n  lineups: [],\r\n  leagueRecords: [],\r\n  connections: [],\r\n  isLoading: false,\r\n  error: null,\r\n  selectedTeam: null,\r\n  \r\n  // User actions\r\n  setUser: (user) => set({ user }),\r\n  \r\n  // Team actions\r\n  setTeams: (teams) => set({ teams }),\r\n  addTeam: (team) => set((state) => ({ teams: [...state.teams, team] })),\r\n  updateTeam: (teamId, updates) => set((state) => ({\r\n    teams: state.teams.map(team => \r\n      team.id === teamId ? { ...team, ...updates } : team\r\n    )\r\n  })),\r\n  \r\n  // Lineup actions\r\n  setLineups: (lineups) => set({ lineups }),\r\n  updateLineup: (lineupId, updates) => set((state) => ({\r\n    lineups: state.lineups.map(lineup => \r\n      lineup.id === lineupId ? { ...lineup, ...updates } : lineup\r\n    )\r\n  })),\r\n  \r\n  // League record actions\r\n  setLeagueRecords: (leagueRecords) => set({ leagueRecords }),\r\n  \r\n  // Connection actions\r\n  setConnections: (connections) => set({ connections }),\r\n  updateConnection: (platform, updates) => set((state) => ({\r\n    connections: state.connections.map(conn => \r\n      conn.platform === platform ? { ...conn, ...updates } : conn\r\n    )\r\n  })),\r\n  \r\n  // UI actions\r\n  setLoading: (isLoading) => set({ isLoading }),\r\n  setError: (error) => set({ error }),\r\n  setSelectedTeam: (selectedTeam) => set({ selectedTeam }),\r\n  \r\n  // Complex actions\r\n  syncTeam: async (teamId) => {\r\n    set({ isLoading: true, error: null });\r\n    try {\r\n      const { teams } = get();\r\n      const team = teams.find(t => t.id === teamId);\r\n      \r\n      if (!team) {\r\n        throw new Error('Team not found');\r\n      }\r\n\r\n      // Sync lineup data from the platform\r\n      const lineup = await unifiedApi.getTeamLineup(team, 8); // Default to week 8\r\n      \r\n      // Update the team's last sync date\r\n      set((state) => ({\r\n        teams: state.teams.map(t => \r\n          t.id === teamId \r\n            ? { ...t, lastSyncDate: new Date() }\r\n            : t\r\n        )\r\n      }));\r\n\r\n      // Update lineup data in the store\r\n      set((state) => ({\r\n        lineups: [\r\n          ...state.lineups.filter(l => l.id !== lineup.id),\r\n          lineup\r\n        ]\r\n      }));\r\n\r\n    } catch (error) {\r\n      console.error('Failed to sync team:', error);\r\n      set({ error: 'Failed to sync team' });\r\n    } finally {\r\n      set({ isLoading: false });\r\n    }\r\n  },\r\n  \r\n  updateLineupPlayer: (lineupId, position, player) => {\r\n    set((state) => ({\r\n      lineups: state.lineups.map(lineup => {\r\n        if (lineup.id === lineupId) {\r\n          return {\r\n            ...lineup,\r\n            players: {\r\n              ...lineup.players,\r\n              [position]: player\r\n            },\r\n            lastUpdated: new Date()\r\n          };\r\n        }\r\n        return lineup;\r\n      })\r\n    }));\r\n  },\r\n  \r\n  calculateWinLoss: () => {\r\n    const { teams } = get();\r\n    const currentSeason = new Date().getFullYear();\r\n    \r\n    const totalWins = teams.reduce((sum, team) => sum + team.record.wins, 0);\r\n    const totalLosses = teams.reduce((sum, team) => sum + team.record.losses, 0);\r\n    const totalTies = teams.reduce((sum, team) => sum + team.record.ties, 0);\r\n    \r\n    const leagueRecord: LeagueRecord = {\r\n      id: `record-${currentSeason}`,\r\n      userId: get().user?.id || '',\r\n      season: currentSeason,\r\n      totalWins,\r\n      totalLosses,\r\n      totalTies,\r\n      winPercentage: totalWins / (totalWins + totalLosses + totalTies) || 0,\r\n      leagues: teams.map(team => ({\r\n        teamId: team.id,\r\n        teamName: team.name,\r\n        platform: team.platform,\r\n        wins: team.record.wins,\r\n        losses: team.record.losses,\r\n        ties: team.record.ties\r\n      }))\r\n    };\r\n    \r\n    set((state) => ({\r\n      leagueRecords: [\r\n        ...state.leagueRecords.filter(record => record.season !== currentSeason),\r\n        leagueRecord\r\n      ]\r\n    }));\r\n  }\r\n}));\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}